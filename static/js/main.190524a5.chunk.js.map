{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["columnsInitial","nameBoard","color","tasks","id","uuidv4","name","taskText","Modal","setAppElement","App","useState","columns","setColumns","modalIsOpen","setModalIsOpen","task","modalCreateTask","setModalCreateTask","console","log","className","onClick","isOpen","onRequestClose","action","onChange","e","target","value","map","board","key","required","type","updatedColummns","el","col","data-toggle","arg","window","confirm","reranged","columnName","ind","findIndex","taskId","splice","deleteTask","up","length","down","index","push","left","right","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.190524a5.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { v4 as uuidv4 } from 'uuid';\nimport Modal from \"react-modal\"\n\n\nconst columnsInitial = [\n  {\n    nameBoard: 'todo',\n    color: 'primary',\n    tasks: [\n      {\n        id: uuidv4(),\n        name: 'todo1',\n        taskText: 'Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece'\n      }]\n  },\n  {\n    nameBoard: 'progress',\n    color: 'secondary',\n    tasks: [\n      {\n        id: uuidv4(),\n        name: 'todo2',\n        taskText: 'Some text2'\n      },\n      {\n        id: uuidv4(),\n        name: 'todo3',\n        taskText: 'There are many variations of passages of Lorem Ipsum available'\n      }]\n  },\n\n  {\n    nameBoard: 'review',\n    color: 'warning',\n    tasks: [\n      {\n        id: uuidv4(),\n        name: 'todo 4',\n        taskText: 'Some text'\n      },\n      {\n        id: uuidv4(),\n        name: 'todo 5',\n        taskText: 'Some text5'\n      }]\n  },\n\n  {\n    nameBoard: 'done',\n    color: 'success',\n    tasks: [\n      {\n        id: uuidv4(),\n        name: 'todo 6',\n        taskText: 'It is a long established fact that a reader will be distracted by the readable content of a page when'\n      },\n      {\n        id: uuidv4(),\n        name: 'todo 7',\n        taskText: 'Some text7'\n      },\n      {\n        id: uuidv4(),\n        name: 'todo 8',\n        taskText: ''\n      },\n      {\n        id: uuidv4(),\n        name: 'todo 9',\n        taskText: 'There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some'\n      }]\n  }\n]\n\nModal.setAppElement('#root')\n\nfunction App() {\n  const [columns, setColumns] = useState(columnsInitial)\n  const [modalIsOpen, setModalIsOpen] = useState(false)\n  const [modalCreateTask, setModalCreateTask] = useState(\n    {\n      nameBoard: 'todo',\n      task: {\n          id: uuidv4(),\n          name: '',\n          taskText: ''\n        }\n    }\n  )\n\n const changeBoard = (e) => {\n    console.log(e.target.value);\n    setModalCreateTask({ ...modalCreateTask, nameBoard:  e.target.value})\n }\n  console.log(modalCreateTask)\n\n const changeInModalTitle = (e) => {\n  setModalCreateTask({...modalCreateTask, task: {...modalCreateTask.task, name: e.target.value}})\n  console.log(modalCreateTask);\n  }\n  const changeInModalText = (e) => {\n    setModalCreateTask({...modalCreateTask, task: {...modalCreateTask.task, taskText: e.target.value}})\n    console.log(modalCreateTask);\n  }\n\n  const up = (arg) => {\n    const reranged = columns.map((col) => {\n        if (col.nameBoard === arg.columnName) {\n          const tasks = col.tasks;\n          let ind = col.tasks.findIndex(el => el.id === arg.taskId)\n          if (ind > 0) {\n            [tasks[ind], tasks[ind - 1]] = [tasks[ind - 1], tasks[ind]]\n            return {...col, tasks}\n          }\n        }\n        return col\n      }\n    )\n    setColumns(reranged)\n  }\n\n  const down = (arg) => {\n    const reranged = columns.map((col) => {\n        if (col.nameBoard === arg.columnName) {\n          const tasks = col.tasks;\n          let ind = col.tasks.findIndex(el => el.id === arg.taskId)\n          if (ind < tasks.length - 1) {\n            [tasks[ind], tasks[ind + 1]] = [tasks[ind + 1], tasks[ind]]\n            return {...col, tasks}\n          }\n        }\n        return col\n      }\n    )\n    setColumns(reranged)\n  }\n\n  const left = (arg) => {\n    const reranged = columns.map((col, index) => {\n        if (col.nameBoard === arg.columnName) {\n          if (index > 0) {\n            let ind = col.tasks.findIndex(el => el.id === arg.taskId)\n            columns[index - 1].tasks.push(...col.tasks.splice(ind, 1))\n            return {...col}\n          }\n        }\n        return col\n      }\n    )\n    setColumns(reranged)\n  }\n\n  const right = (arg) => {\n    const reranged = columns.map((col, index) => {\n        if (col.nameBoard === arg.columnName) {\n          if (index < columns.length - 1) {\n            let ind = col.tasks.findIndex(el => el.id === arg.taskId)\n            columns[index + 1].tasks.push(...col.tasks.splice(ind, 1))\n            return {...col}\n          }\n        }\n        return col\n      }\n    )\n    setColumns(reranged)\n  }\n\n  const deleteTask = (arg) => {\n\n    if (window.confirm(\"Are you sure?\")) {\n      const reranged = columns.map(col => {\n          if (col.nameBoard === arg.columnName) {\n            let ind = col.tasks.findIndex(el => el.id === arg.taskId)\n            return {\n              ...col, ...col.tasks.splice(ind, 1)\n            }\n          }\n          return col\n        }\n      )\n      setColumns(reranged)\n    }\n  }\n\n  const saveModalTask =()=>{\n\n\n    const updatedColummns = columns.map(el => {\n      if(el.nameBoard === modalCreateTask.nameBoard){\n       return { ...el, tasks: [...el.tasks, modalCreateTask.task]}\n      } else return el;\n    })\n\n    setColumns(updatedColummns)\n    setModalIsOpen(false)\n  }\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"mb-4 mt-4\">Kanban</h1>\n\n      <button className=\"btn btn-light mb-10\" onClick={() => setModalIsOpen(true)}>Create task</button>\n\n      <Modal className=\"modal-dialog\" isOpen={modalIsOpen}\n             onRequestClose={() => setModalIsOpen(false)}>\n\n        <div className=\"modal-content\">\n          <div className=\"modal-header\">\n            <h5 className=\"modal-title\">Create new task</h5>\n          </div>\n\n          <div className=\"modal-body\">\n\n            <form action=\"\">\n              <div className=\"input-group mb-3\">\n                <div className=\"input-group-prepend\">\n                  <label className=\"input-group-text\">Board</label>\n                </div>\n\n                <select className=\"custom-select\" onChange={changeBoard} value={modalCreateTask.nameBoard} >\n                  {columns.map((board) => <option key={uuidv4()}>{board.nameBoard}</option>)}\n                </select>\n\n              </div>\n\n              <div className=\"input-group mb-3\">\n                <div className=\"input-group-prepend\">\n                  <span className=\"input-group-text\">Title</span>\n                </div>\n                <input className=\"form-control\" name=\"name\" onChange={changeInModalTitle} required/>\n              </div>\n\n              <div className=\"input-group mb-3\">\n                <div className=\"input-group-prepend\">\n                  <span className=\"input-group-text\">Text tasks</span>\n                </div>\n                <textarea className=\"form-control\" name=\"taskText\" onChange={changeInModalText}></textarea>\n              </div>\n            </form>\n          </div>\n\n          <div className=\"modal-footer\">\n            <button type=\"button\" className=\"btn btn-secondary\" onClick={() => setModalIsOpen(false)}>Cancel</button>\n            <button type=\"button\" className=\"btn btn-primary\" onClick={saveModalTask}>Save</button>\n          </div>\n        </div>\n\n      </Modal>\n\n\n      <div className=\"row\">\n        {columns.map(col =>\n          <div className='col-sm d-flex' key={col.nameBoard}>\n            <div className={`w-100 border-top border-${col.color} border-width-4`}>\n              <h3>{col.nameBoard}</h3>\n              {\n                col.tasks.map(task =>\n                  <div className=\"card mb-2\" key={task.id}>\n                    <div className=\"card-body\">\n                      <h5 className=\"card-title\">\n                        {task.name}\n\n                        <button type=\"button\" className=\"btn btn-light float-right text-danger\" data-toggle=\"modal\"\n                                onClick={() => deleteTask({\n                                    columnName: col.nameBoard,\n                                    taskId: task.id\n                                  }\n                                )}>×\n                        </button>\n                      </h5>\n\n                      <p>{task.taskText}</p>\n                      <button type=\"button\" className=\"btn btn-light\"\n                              onClick={() => up({\n                                  columnName: col.nameBoard,\n                                  taskId: task.id\n                                }\n                              )}> ↑\n                      </button>\n                      <button type=\"button\" className=\"btn btn-light\"\n                              onClick={() => down({\n                                  columnName: col.nameBoard,\n                                  taskId: task.id\n                                }\n                              )}> ↓\n                      </button>\n                      <button type=\"button\" className=\"btn btn-light\"\n                              onClick={() => left({\n                                  columnName: col.nameBoard,\n                                  taskId: task.id\n                                }\n                              )}> ←\n                      </button>\n                      <button type=\"button\" className=\"btn btn-light\"\n                              onClick={() => right({\n                                  columnName: col.nameBoard,\n                                  taskId: task.id\n                                }\n                              )}> →\n                      </button>\n                    </div>\n                  </div>\n                )}\n            </div>\n          </div>\n        )}\n\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}