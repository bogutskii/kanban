{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["columnsInitial","nameBoard","color","tasks","id","name","App","useState","columns","setColumns","className","map","col","key","task","Math","random","type","onClick","arg","reranged","columnName","i","length","taskId","up","down","index","push","splice","left","right","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mNAIMA,G,YAAiB,CACrB,CACEC,UAAW,OACXC,MAAO,UACPC,MAAO,CACL,CACEC,GAAI,EACJC,KAAM,WAGZ,CACEJ,UAAW,WACXC,MAAO,YACPC,MAAO,CACL,CACEC,GAAI,EACJC,KAAM,SAER,CACED,GAAI,EACJC,KAAM,WAIZ,CACEJ,UAAW,SACXC,MAAO,UACPC,MAAO,CACL,CACEC,GAAI,EACJC,KAAM,UAER,CACED,GAAI,EACJC,KAAM,YAIZ,CACEJ,UAAW,OACXC,MAAO,UACPC,MAAO,CACL,CACEC,GAAI,EACJC,KAAM,UAER,CACED,GAAI,EACJC,KAAM,UAER,CACED,GAAI,EACJC,KAAM,UAER,CACED,GAAI,EACJC,KAAM,cA4JCC,MAtJf,WAAgB,IAAD,EACiBC,mBAASP,GAD1B,mBACNQ,EADM,KACGC,EADH,KA8Fb,OACE,yBAAKC,UAAU,aACb,wBAAIA,UAAU,aAAd,UACA,yBAAKA,UAAU,OACZF,EAAQG,KAAI,SAAAC,GAAG,OACd,yBAAKF,UAAU,gBAAgBG,IAAKD,EAAIX,WACtC,yBAAKS,UAAS,kCAA6BE,EAAIV,MAAjC,oBACZ,4BAAKU,EAAIX,WAEPW,EAAIT,MAAMQ,KAAI,SAAAG,GAAI,OAChB,yBAAKJ,UAAU,YAAYG,IAAKC,EAAKV,GAAKW,KAAKC,UAC7C,yBAAKN,UAAU,aACb,wBAAIA,UAAU,cACXI,EAAKT,MAER,4BAAQY,KAAK,SAASP,UAAU,gBACxBQ,QAAS,kBA3G1B,SAACC,GACV,IAAMC,EAAWZ,EAAQG,KAAI,SAACC,GAC1B,GAAIA,EAAIX,YAAckB,EAAIE,WAAY,CAEpC,IADA,IAAMlB,EAAQS,EAAIT,MACTmB,EAAI,EAAGA,EAAInB,EAAMoB,OAAQD,IAChC,GAAInB,EAAMmB,GAAGlB,KAAOe,EAAIK,QAClBF,EAAI,EAAG,CAAC,IAAD,EACkB,CAACnB,EAAMmB,EAAI,GAAInB,EAAMmB,IAChD,OADCnB,EAAMmB,GADE,KACEnB,EAAMmB,EAAI,GADZ,KAEF,2BAAIV,GAAX,IAAgBT,UAKtB,OAAO,2BAAIS,GAAX,IAAgBT,UAEhB,OAAOS,KAGbH,EAAWW,GAyF8BK,CAAG,CACdJ,WAAYT,EAAIX,UAChBuB,OAAQV,EAAKV,OAHzB,WAOA,4BAAQa,KAAK,SAASP,UAAU,gBACxBQ,QAAS,kBA7FxB,SAACC,GACZ,IAAMC,EAAWZ,EAAQG,KAAI,SAACC,GAC1B,GAAIA,EAAIX,YAAckB,EAAIE,WAAY,CAEpC,IADA,IAAMlB,EAAQS,EAAIT,MACTmB,EAAI,EAAGA,EAAInB,EAAMoB,OAAQD,IAChC,GAAInB,EAAMmB,GAAGlB,KAAOe,EAAIK,QAClBF,EAAInB,EAAMoB,OAAS,EAAG,CAAC,IAAD,EACG,CAACpB,EAAMmB,EAAI,GAAInB,EAAMmB,IAChD,OADCnB,EAAMmB,GADiB,KACbnB,EAAMmB,EAAI,GADG,KAEjB,2BAAIV,GAAX,IAAgBT,UAKtB,OAAO,2BAAIS,GAAX,IAAgBT,UAEhB,OAAOS,KAGbH,EAAWW,GA2E8BM,CAAK,CAChBL,WAAYT,EAAIX,UAChBuB,OAAQV,EAAKV,OAHzB,WAOA,4BAAQa,KAAK,SAASP,UAAU,gBACxBQ,QAAS,kBA9ExB,SAACC,GACZ,IAAMC,EAAWZ,EAAQG,KAAI,SAACC,EAAKe,GAC/B,GAAIf,EAAIX,YAAckB,EAAIE,WAAY,CACpC,GAAIM,EAAQ,EACV,IAAK,IAAIL,EAAI,EAAGA,EAAIV,EAAIT,MAAMoB,OAAQD,IAAK,CACJ,IAAD,EAApC,GAAIV,EAAIT,MAAMmB,GAAGlB,KAAOe,EAAIK,OAK1B,OAFH,EAAAhB,EAAQmB,EAAQ,GAAGxB,OAAMyB,KAAzB,oBAAiChB,EAAIT,MAAM0B,OAAOP,EAAE,KAE1C,eAAIV,GAMjB,OAAO,eAAIA,GAEX,OAAOA,KAGbH,EAAWW,GAyD8BU,CAAK,CAChBT,WAAYT,EAAIX,UAChBuB,OAAQV,EAAKV,OAHzB,WAOA,4BAAQa,KAAK,SAASP,UAAU,gBACxBQ,QAAS,kBA7DvB,SAACC,GACb,IAAMC,EAAWZ,EAAQG,KAAI,SAACC,EAAKe,GAC/B,GAAIf,EAAIX,YAAckB,EAAIE,WAAY,CACpC,GAAIM,EAAQnB,EAAQe,OAAO,EACzB,IAAK,IAAID,EAAI,EAAGA,EAAIV,EAAIT,MAAMoB,OAAQD,IAAK,CACJ,IAAD,EAApC,GAAIV,EAAIT,MAAMmB,GAAGlB,KAAOe,EAAIK,OAK1B,OAFA,EAAAhB,EAAQmB,EAAQ,GAAGxB,OAAMyB,KAAzB,oBAAiChB,EAAIT,MAAM0B,OAAOP,EAAE,KAE7C,eAAIV,GAMjB,OAAO,eAAIA,GAEX,OAAOA,KAGbH,EAAWW,GAwC8BW,CAAM,CACjBV,WAAYT,EAAIX,UAChBuB,OAAQV,EAAKV,OAHzB,wBCxLF4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.95b0c2bb.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nconst columnsInitial = [\n  {\n    nameBoard: 'todo',\n    color: 'primary',\n    tasks: [\n      {\n        id: 1,\n        name: 'todo1'\n      }]\n  },\n  {\n    nameBoard: 'progress',\n    color: 'secondary',\n    tasks: [\n      {\n        id: 2,\n        name: 'todo2'\n      },\n      {\n        id: 3,\n        name: 'todo3'\n      }]\n  },\n\n  {\n    nameBoard: 'review',\n    color: 'warning',\n    tasks: [\n      {\n        id: 4,\n        name: 'todo 4'\n      },\n      {\n        id: 5,\n        name: 'todo 5'\n      }]\n  },\n\n  {\n    nameBoard: 'done',\n    color: 'success',\n    tasks: [\n      {\n        id: 6,\n        name: 'todo 6'\n      },\n      {\n        id: 7,\n        name: 'todo 7'\n      },\n      {\n        id: 8,\n        name: 'todo 8'\n      },\n      {\n        id: 9,\n        name: 'todo 9'\n      }]\n  }\n]\n\n\nfunction App() {\n  const [columns, setColumns] = useState(columnsInitial)\n\n  const up = (arg) => {\n    const reranged = columns.map((col) => {\n        if (col.nameBoard === arg.columnName) {\n          const tasks = col.tasks;\n          for (let i = 0; i < tasks.length; i++) {\n            if (tasks[i].id === arg.taskId) {\n              if (i > 0) {\n                [tasks[i], tasks[i - 1]] = [tasks[i - 1], tasks[i]]\n                return {...col, tasks}\n              }\n              ;\n            }\n          }\n          return {...col, tasks}\n        } else\n          return col\n      }\n    )\n    setColumns(reranged)\n  }\n\n  const down = (arg) => {\n    const reranged = columns.map((col) => {\n        if (col.nameBoard === arg.columnName) {\n          const tasks = col.tasks;\n          for (let i = 0; i < tasks.length; i++) {\n            if (tasks[i].id === arg.taskId) {\n              if (i < tasks.length - 1) {\n                [tasks[i], tasks[i + 1]] = [tasks[i + 1], tasks[i]]\n                return {...col, tasks}\n              }\n              ;\n            }\n          }\n          return {...col, tasks}\n        } else\n          return col\n      }\n    )\n    setColumns(reranged)\n  }\n\n\n  const left = (arg) => {\n    const reranged = columns.map((col, index) => {\n        if (col.nameBoard === arg.columnName) {\n          if (index > 0) {\n            for (let i = 0; i < col.tasks.length; i++) {\n              if (col.tasks[i].id === arg.taskId) {\n               // console.log(columns,col, index , col.tasks,'llllll', col.tasks.splice(i,1))\n\n             columns[index - 1].tasks.push(...col.tasks.splice(i,1))\n\n                return {...col}\n\n\n              }\n            }\n          }\n          return {...col }\n        } else\n          return col\n      }\n    )\n    setColumns(reranged)\n  }\n\n  const right = (arg) => {\n    const reranged = columns.map((col, index) => {\n        if (col.nameBoard === arg.columnName) {\n          if (index < columns.length-1) {\n            for (let i = 0; i < col.tasks.length; i++) {\n              if (col.tasks[i].id === arg.taskId) {\n                // console.log(columns,col, index , col.tasks,'llllll', col.tasks.splice(i,1))\n\n                columns[index + 1].tasks.push(...col.tasks.splice(i,1))\n\n                return {...col}\n\n\n              }\n            }\n          }\n          return {...col }\n        } else\n          return col\n      }\n    )\n    setColumns(reranged)\n  }\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"mb-4 mt-4\">Kanban</h1>\n      <div className=\"row\">\n        {columns.map(col =>\n          <div className='col-sm d-flex' key={col.nameBoard}>\n            <div className={`w-100 border-top border-${col.color} border-width-4`}>\n              <h3>{col.nameBoard}</h3>\n              {\n                col.tasks.map(task =>\n                  <div className=\"card mb-2\" key={task.id * Math.random()}>\n                    <div className=\"card-body\">\n                      <h5 className=\"card-title\">\n                        {task.name}\n                      </h5>\n                      <button type=\"button\" className=\"btn btn-light\"\n                              onClick={() => up({\n                                  columnName: col.nameBoard,\n                                  taskId: task.id\n                                }\n                              )}> ↑\n                      </button>\n                      <button type=\"button\" className=\"btn btn-light\"\n                              onClick={() => down({\n                                  columnName: col.nameBoard,\n                                  taskId: task.id\n                                }\n                              )}> ↓\n                      </button>\n                      <button type=\"button\" className=\"btn btn-light\"\n                              onClick={() => left({\n                                  columnName: col.nameBoard,\n                                  taskId: task.id\n                                }\n                              )}> ←\n                      </button>\n                      <button type=\"button\" className=\"btn btn-light\"\n                              onClick={() => right({\n                                  columnName: col.nameBoard,\n                                  taskId: task.id\n                                }\n                              )}> →\n                      </button>\n\n                    </div>\n                  </div>\n                )}\n\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}