{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["columnsInitial","nameBoard","color","tasks","id","uuidv4","name","taskText","App","useState","columns","setColumns","className","map","col","key","task","type","onClick","arg","reranged","index","columnName","i","length","taskId","splice","deleteTask","up","down","push","left","right","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.06a632c1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { v4 as uuidv4 } from 'uuid';\n\n\nconst columnsInitial = [\n  {\n    nameBoard: 'todo',\n    color: 'primary',\n    tasks: [\n      {\n        id: uuidv4(),\n        name: 'todo1',\n        taskText: 'Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece'\n      }]\n  },\n  {\n    nameBoard: 'progress',\n    color: 'secondary',\n    tasks: [\n      {\n        id: uuidv4(),\n        name: 'todo2',\n        taskText: 'Some text2'\n      },\n      {\n        id: uuidv4(),\n        name: 'todo3',\n        taskText: 'There are many variations of passages of Lorem Ipsum available'\n      }]\n  },\n\n  {\n    nameBoard: 'review',\n    color: 'warning',\n    tasks: [\n      {\n        id: uuidv4(),\n        name: 'todo 4',\n        taskText: 'Some text'\n      },\n      {\n        id: uuidv4(),\n        name: 'todo 5',\n        taskText: 'Some text5'\n      }]\n  },\n\n  {\n    nameBoard: 'done',\n    color: 'success',\n    tasks: [\n      {\n        id: uuidv4(),\n        name: 'todo 6',\n        taskText: 'It is a long established fact that a reader will be distracted by the readable content of a page when'\n      },\n      {\n        id: uuidv4(),\n        name: 'todo 7',\n        taskText: 'Some text7'\n      },\n      {\n        id: uuidv4(),\n        name: 'todo 8',\n        taskText: ''\n      },\n      {\n        id: uuidv4(),\n        name: 'todo 9',\n        taskText: 'There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some'\n      }]\n  }\n]\n\n\nfunction App() {\n  const [columns, setColumns] = useState(columnsInitial)\n\n  const up = (arg) => {\n    const reranged = columns.map((col) => {\n        if (col.nameBoard === arg.columnName) {\n          const tasks = col.tasks;\n          for (let i = 0; i < tasks.length; i++) {\n            if (tasks[i].id === arg.taskId) {\n              if (i > 0) {\n                [tasks[i], tasks[i - 1]] = [tasks[i - 1], tasks[i]]\n                return {...col, tasks}\n              }\n            }\n          }\n          return {...col, tasks}\n        }\n        return col\n      }\n    )\n    setColumns(reranged)\n  }\n\n  const down = (arg) => {\n    const reranged = columns.map((col) => {\n        if (col.nameBoard === arg.columnName) {\n          const tasks = col.tasks;\n          for (let i = 0; i < tasks.length; i++) {\n            if (tasks[i].id === arg.taskId) {\n              if (i < tasks.length - 1) {\n                [tasks[i], tasks[i + 1]] = [tasks[i + 1], tasks[i]]\n                return {...col, tasks}\n              }\n            }\n          }\n          return {...col, tasks}\n        }\n        return col\n      }\n    )\n    setColumns(reranged)\n  }\n\n\n  const left = (arg) => {\n    const reranged = columns.map((col, index) => {\n        if (col.nameBoard === arg.columnName) {\n          if (index > 0) {\n            for (let i = 0; i < col.tasks.length; i++) {\n              if (col.tasks[i].id === arg.taskId) {\n                columns[index - 1].tasks.push(...col.tasks.splice(i, 1))\n                return {...col}\n              }\n            }\n          }\n          return {...col}\n        }\n        return col\n      }\n    )\n    setColumns(reranged)\n  }\n\n  const right = (arg) => {\n    const reranged = columns.map((col, index) => {\n        if (col.nameBoard === arg.columnName) {\n          if (index < columns.length - 1) {\n            for (let i = 0; i < col.tasks.length; i++) {\n              if (col.tasks[i].id === arg.taskId) {\n                columns[index + 1].tasks.push(...col.tasks.splice(i, 1))\n                return {...col}\n              }\n            }\n          }\n          return {...col}\n        }\n        return col\n      }\n    )\n    setColumns(reranged)\n  }\n  const deleteTask = (arg) => {\n    const reranged = columns.map((col, index) => {\n        if (col.nameBoard === arg.columnName) {\n\n          for (let i = 0; i < col.tasks.length; i++) {\n            if (col.tasks[i].id === arg.taskId) {\n              return {...col, ...col.tasks.splice(i, 1)}\n            }\n\n          }\n          return {...col}\n        }\n        return col\n      }\n    )\n    setColumns(reranged)\n  }\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"mb-4 mt-4\">Kanban</h1>\n      <button>Create task</button>\n      <div className=\"row\">\n        {columns.map(col =>\n          <div className='col-sm d-flex' key={col.nameBoard}>\n            <div className={`w-100 border-top border-${col.color} border-width-4`}>\n              <h3>{col.nameBoard}</h3>\n              {\n                col.tasks.map(task =>\n                  <div className=\"card mb-2\" key={task.id}>\n                    <div className=\"card-body\">\n                      <h5 className=\"card-title\">\n                        {task.name}\n\n                        <button type=\"button\" className=\"btn btn-light float-right\"\n                                onClick={() => deleteTask({\n                                    columnName: col.nameBoard,\n                                    taskId: task.id\n                                  }\n                                )}> ×\n                        </button>\n\n                      </h5>\n                      <p>{task.taskText}</p>\n                      <button type=\"button\" className=\"btn btn-light\"\n                              onClick={() => up({\n                                  columnName: col.nameBoard,\n                                  taskId: task.id\n                                }\n                              )}> ↑\n                      </button>\n                      <button type=\"button\" className=\"btn btn-light\"\n                              onClick={() => down({\n                                  columnName: col.nameBoard,\n                                  taskId: task.id\n                                }\n                              )}> ↓\n                      </button>\n                      <button type=\"button\" className=\"btn btn-light\"\n                              onClick={() => left({\n                                  columnName: col.nameBoard,\n                                  taskId: task.id\n                                }\n                              )}> ←\n                      </button>\n                      <button type=\"button\" className=\"btn btn-light\"\n                              onClick={() => right({\n                                  columnName: col.nameBoard,\n                                  taskId: task.id\n                                }\n                              )}> →\n                      </button>\n\n\n\n                    </div>\n                  </div>\n                )}\n\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}